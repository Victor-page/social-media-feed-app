{"version":3,"sources":["app/Navbar.js","api/client.js","features/posts/postsSlice.js","features/posts/AddPostForm.js","features/posts/PostAuthor.js","features/posts/ReactionButtons.js","features/posts/TimeAgo.js","components/Spinner.js","features/posts/PostList.js","features/posts/SinglePostPage.js","features/posts/EditPostForm.js","App.js","api/server.js","features/users/usersSlice.js","app/store.js","index.js"],"names":["Navbar","className","to","client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","status","url","Error","statusText","Promise","reject","message","get","post","fetchPosts","createAsyncThunk","addNewPost","initialPost","createSlice","name","initialState","postList","error","reducers","postUpdated","state","action","payload","id","title","content","existingPost","find","reactionAdded","postId","reaction","reactions","extraReducers","builder","addCase","pending","fulfilled","concat","rejected","push","reducer","actions","postAdded","selectAllPosts","posts","selectPostById","AddPostForm","useState","setTitle","setContent","userId","setUserId","dispatch","useDispatch","usersList","useSelector","users","canSave","Boolean","userListOptions","map","value","onSubmit","event","preventDefault","htmlFor","type","onChange","target","disabled","PostAuthor","author","user","reactionEmoji","thumbsUp","hooray","heart","rocket","eyes","ReactionButtons","onReactionAdded","reactionButtons","Object","entries","emoji","onClick","bind","TimeAgo","timestamp","timeAgo","date","parseISO","timePeriod","formatDistanceToNow","Spinner","text","size","header","style","height","width","PostExcerpt","substring","PostsList","postStatus","useEffect","slice","sort","b","localeCompare","SinglePostPage","match","params","EditPostForm","history","useHistory","placeholder","App","seedDate","exact","path","render","PostList","component","fetchUsers","configureStore","postsReducer","usersReducer","ARTIFICIAL_DELAY_MS","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","db","factory","primaryKey","nanoid","firstName","String","lastName","username","manyOf","oneOf","comments","comment","Number","createUserData","internet","userName","i","create","j","newPost","lorem","words","recent","paragraphs","serializePost","handlers","rest","req","res","ctx","getAll","delay","findFirst","where","equals","patch","updatedPost","update","notifications","generateRandomNotifications","undefined","worker","setupWorker","socketServer","MockSocketServer","sendRandomNotifications","socket","since","obj","send","sendMessage","on","parse","notificationTemplates","numNotifications","pastDate","now","valueOf","setMinutes","getMinutes","Array","template","between","start","onUnhandledRequest","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05d7dd4f.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\n\nconst Navbar = () => (\n  <nav>\n    <section>\n      {/* <h1>Redux Essentials</h1> */}\n\n      <div className=\"navContent\">\n        <div className=\"navLinks\"></div>\n        <Link to=\"/\">Posts</Link>\n      </div>\n    </section>\n  </nav>\n);\n\nexport default Navbar;\n","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' };\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  };\n\n  if (body) {\n    config.body = JSON.stringify(body);\n  }\n\n  let data;\n  try {\n    const response = await window.fetch(endpoint, config);\n    data = await response.json();\n    if (response.ok) {\n      // Return a result object similar to Axios\n      return {\n        status: response.status,\n        data,\n        headers: response.headers,\n        url: response.url,\n      };\n    }\n    throw new Error(response.statusText);\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data);\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' });\n};\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body });\n};\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { client } from '../../api/client';\r\n\r\nconst initialState = { postList: [], status: 'idle', error: null };\r\n\r\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\r\n  const response = await client.get('fakeApi/posts');\r\n  return response.data;\r\n});\r\n\r\nexport const addNewPost = createAsyncThunk(\r\n  'postst/addNewPost',\r\n  async (initialPost) => {\r\n    // We send the initial data to the fake API server\r\n    const response = await client.post('/fakeApi/posts', initialPost);\r\n    // The response includes the complete post object, including unique ID\r\n    return response.data;\r\n  }\r\n);\r\n\r\nconst { reducer, actions } = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    postUpdated(state, action) {\r\n      const { id, title, content } = action.payload;\r\n      const existingPost = state.postList.find((post) => post.id === id);\r\n      if (existingPost) {\r\n        existingPost.title = title;\r\n        existingPost.content = content;\r\n      }\r\n    },\r\n    reactionAdded(state, action) {\r\n      const { postId, reaction } = action.payload;\r\n      const existingPost = state.postList.find((post) => post.id === postId);\r\n      existingPost && existingPost.reactions[reaction]++;\r\n    },\r\n  },\r\n  extraReducers(builder) {\r\n    builder\r\n      .addCase(fetchPosts.pending, (state, action) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n\r\n        state.postList = state.postList.concat(action.payload);\r\n      })\r\n      .addCase(fetchPosts.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.error.message;\r\n      });\r\n\r\n    builder.addCase(addNewPost.fulfilled, (state, action) => {\r\n      state.postList.push(action.payload);\r\n    });\r\n  },\r\n});\r\n\r\nexport const { postAdded, postUpdated, reactionAdded } = actions;\r\n\r\nexport default reducer;\r\n\r\nexport const selectAllPosts = (state) => {\r\n  return state.posts.postList;\r\n};\r\n\r\nexport const selectPostById = (state, postId) =>\r\n  state.posts.postList.find((post) => post.id === postId);\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { postAdded } from './postsSlice';\r\n\r\nconst AddPostForm = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [userId, setUserId] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const usersList = useSelector((state) => state.users);\r\n\r\n  const onTitleChanged = ({ target }) => setTitle(target.value);\r\n  const onContentChanged = ({ target }) => setContent(target.value);\r\n  const onAuthorChanged = ({ target }) => setUserId(target.value);\r\n\r\n  const resetForm = () => {\r\n    setTitle('');\r\n    setContent('');\r\n  };\r\n\r\n  const onSavePostSubmitted = (event) => {\r\n    event.preventDefault();\r\n    title && content && dispatch(postAdded(title, content, userId));\r\n    resetForm();\r\n  };\r\n\r\n  const canSave = Boolean(title) && Boolean(content) && Boolean(userId);\r\n\r\n  const userListOptions = usersList.map(({ id, name }) => (\r\n    <option key={id} value={id}>\r\n      {name}\r\n    </option>\r\n  ));\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add a New Post</h2>\r\n      <form onSubmit={onSavePostSubmitted}>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postAuthor\">Author:</label>\r\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\r\n          <option value=\"\"></option>\r\n          {userListOptions}\r\n        </select>\r\n        <label htmlFor=\"postContent\">Post:</label>\r\n        <textarea\r\n          type=\"text\"\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <button type=\"submit\" disabled={!canSave}>\r\n          Save Post\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AddPostForm;\r\n","import { useSelector } from 'react-redux';\r\n\r\nconst PostAuthor = ({ userId }) => {\r\n  const author = useSelector((state) =>\r\n    state.users.find((user) => user.id === userId)\r\n  );\r\n\r\n  return <span>by {author ? author.name : 'Unknown author'}</span>;\r\n};\r\n\r\nexport default PostAuthor;\r\n","import { useDispatch } from 'react-redux';\r\n\r\nimport { reactionAdded } from './postsSlice';\r\n\r\nconst reactionEmoji = {\r\n  thumbsUp: '👍',\r\n  hooray: '🎉',\r\n  heart: '❤️',\r\n  rocket: '🚀',\r\n  eyes: '👀',\r\n};\r\n\r\nconst ReactionButtons = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onReactionAdded = (id, name) =>\r\n    dispatch(reactionAdded({ postId: id, reaction: name }));\r\n\r\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => (\r\n    <button\r\n      key={name}\r\n      type=\"button\"\r\n      className=\"muted-button reaction-button\"\r\n      onClick={onReactionAdded.bind(null, post.id, name)}\r\n    >\r\n      {emoji} {post.reactions[name]}\r\n    </button>\r\n  ));\r\n\r\n  return <div>{reactionButtons}</div>;\r\n};\r\n\r\nexport default ReactionButtons;\r\n","import { parseISO, formatDistanceToNow } from 'date-fns';\r\n\r\nconst TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = '';\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp);\r\n    const timePeriod = formatDistanceToNow(date);\r\n    timeAgo = `${timePeriod} ago`;\r\n  }\r\n\r\n  return (\r\n    <span title={timestamp}>\r\n      &nbsp; <i>{timeAgo}</i>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TimeAgo;\r\n","import React from 'react';\n\nexport const Spinner = ({ text = '', size = '5em' }) => {\n  const header = text ? <h4>{text}</h4> : null;\n  return (\n    <div className=\"spinner\">\n      {header}\n      <div className=\"loader\" style={{ height: size, width: size }} />\n    </div>\n  );\n};\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport PostAuthor from './PostAuthor';\r\nimport ReactionButtons from './ReactionButtons';\r\nimport TimeAgo from './TimeAgo';\r\nimport { selectAllPosts, fetchPosts } from './postsSlice';\r\nimport { Spinner } from '../../components/Spinner';\r\n\r\nconst PostExcerpt = ({ post }) => (\r\n  <article>\r\n    <h3>{post.title}</h3>\r\n    <div>\r\n      <PostAuthor userId={post.user} />\r\n      <TimeAgo timestamp={post.date} />\r\n    </div>\r\n    <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n\r\n    <ReactionButtons post={post} />\r\n    <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n      View Post\r\n    </Link>\r\n  </article>\r\n);\r\n\r\nconst PostsList = () => {\r\n  const dispatch = useDispatch();\r\n  const postList = useSelector(selectAllPosts);\r\n\r\n  const postStatus = useSelector((state) => state.posts.status);\r\n  const error = useSelector((state) => state.posts.error);\r\n\r\n  useEffect(() => {\r\n    if (postStatus === 'idle') {\r\n      dispatch(fetchPosts());\r\n    }\r\n  }, [dispatch, postStatus]);\r\n\r\n  let content;\r\n\r\n  if (postStatus === 'loading') {\r\n    content = <Spinner text=\"Loading...\" />;\r\n  } else if (postStatus === 'succeeded') {\r\n    const orderedPosts = postList\r\n      .slice()\r\n      .sort((a, b) => b.date.localeCompare(a.date));\r\n\r\n    content = orderedPosts.map((post) => (\r\n      <PostExcerpt key={post.id} post={post} />\r\n    ));\r\n  } else if (postStatus === 'failed') {\r\n    content = <p>{error}</p>;\r\n  }\r\n\r\n  return (\r\n    <section className=\"post-list\">\r\n      <h2>Posts</h2>\r\n      {content}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default PostsList;\r\n","import { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport PostAuthor from './PostAuthor';\r\nimport ReactionButtons from './ReactionButtons';\r\nimport TimeAgo from './TimeAgo';\r\nimport { selectPostById } from './postsSlice';\r\n\r\nconst SinglePostPage = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const post = useSelector((state) => selectPostById(state, postId));\r\n\r\n  const { user, id, title, content, date } = post;\r\n\r\n  if (!post) {\r\n    return (\r\n      <section>\r\n        <h2>Post not found!</h2>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <article className=\"post\">\r\n        <h2>{title}</h2>\r\n        <div>\r\n          <PostAuthor userId={user} />\r\n          <TimeAgo timestamp={date} />\r\n        </div>\r\n        <p className=\"post-content\">{content}</p>\r\n        <ReactionButtons post={post} />\r\n        <Link to={`/edit-post/${id}`} className=\"button\">\r\n          Edit Post\r\n        </Link>\r\n      </article>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SinglePostPage;\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { postUpdated, selectPostById } from './postsSlice';\r\n\r\nconst EditPostForm = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const post = useSelector((state) => selectPostById(state, postId));\r\n\r\n  const [title, setTitle] = useState(post.title);\r\n  const [content, setContent] = useState(post.content);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const onTitleChanged = (event) => setTitle(event.target.value);\r\n  const onContentChanged = (event) => setContent(event.target.value);\r\n\r\n  const onSavePostSubmitted = (event) => {\r\n    event.preventDefault();\r\n    if (!title || !content) {\r\n      return;\r\n    }\r\n\r\n    dispatch(postUpdated({ id: postId, content, title }));\r\n    history.push(`/posts/${postId}`);\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h2>Edit Post</h2>\r\n      <form onSubmit={onSavePostSubmitted}>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <button type=\"submit\">Save Post</button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default EditPostForm;\r\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n\nimport Navbar from './app/Navbar';\nimport AddPostForm from './features/posts/AddPostForm';\nimport PostList from './features/posts/PostList';\nimport SinglePostPage from './features/posts/SinglePostPage';\nimport EditPostForm from './features/posts/EditPostForm';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <>\n                <AddPostForm />\n                <PostList />\n              </>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/edit-post/:postId\" component={EditPostForm} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { rest, setupWorker } from 'msw';\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data';\nimport { nanoid } from '@reduxjs/toolkit';\nimport faker from 'faker';\nimport seedrandom from 'seedrandom';\nimport { Server as MockSocketServer } from 'mock-socket';\nimport { setRandom } from 'txtgen';\n\nimport { parseISO } from 'date-fns';\n\nconst NUM_USERS = 3;\nconst POSTS_PER_USER = 3;\nconst RECENT_NOTIFICATIONS_DAYS = 7;\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 2000;\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true;\n\nlet rng = seedrandom();\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed');\n  let seedDate;\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString);\n  } else {\n    seedDate = new Date();\n    randomSeedString = seedDate.toISOString();\n    localStorage.setItem('randomTimestampSeed', randomSeedString);\n  }\n\n  rng = seedrandom(randomSeedString);\n  setRandom(rng);\n  faker.seed(seedDate.getTime());\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(rng() * (max - min + 1)) + min;\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1);\n  return array[index];\n};\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user'),\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post'),\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post'),\n  },\n});\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName();\n  const lastName = faker.name.lastName();\n\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName(),\n  };\n};\n\nconst createPostData = (user) => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create(),\n  };\n};\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData());\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author);\n    db.post.create(newPost);\n  }\n}\n\nconst serializePost = (post) => ({\n  ...post,\n  user: post.user.id,\n});\n\n/* MSW REST API Handlers */\n\nexport const handlers = [\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\n    const posts = db.post.getAll().map(serializePost);\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts));\n  }),\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\n    const data = req.body;\n\n    if (data.content === 'error') {\n      return res(\n        ctx.delay(ARTIFICIAL_DELAY_MS),\n        ctx.status(500),\n        ctx.json('Server error saving this post!')\n      );\n    }\n\n    data.date = new Date().toISOString();\n\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } });\n    data.user = user;\n    data.reactions = db.reaction.create();\n\n    const post = db.post.create(data);\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)));\n  }),\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    });\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)));\n  }),\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n    const { id, ...data } = req.body;\n    const updatedPost = db.post.update({\n      where: { id: { equals: req.params.postId } },\n      data,\n    });\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    );\n  }),\n\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    });\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json({ comments: post.comments })\n    );\n  }),\n\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n    const postId = req.params.postId;\n    const reaction = req.body.reaction;\n    const post = db.post.findFirst({\n      where: { id: { equals: postId } },\n    });\n\n    const updatedPost = db.post.update({\n      where: { id: { equals: postId } },\n      data: {\n        reactions: {\n          ...post.reactions,\n          [reaction]: (post.reactions[reaction] += 1),\n        },\n      },\n    });\n\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    );\n  }),\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\n    const numNotifications = getRandomInt(1, 5);\n\n    let notifications = generateRandomNotifications(\n      undefined,\n      numNotifications,\n      db\n    );\n\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications));\n  }),\n  rest.get('/fakeApi/users', (req, res, ctx) => {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()));\n  }),\n];\n\nexport const worker = setupWorker(...handlers);\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost');\n\nlet currentSocket;\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj));\n};\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5);\n\n  const notifications = generateRandomNotifications(\n    since,\n    numNotifications,\n    db\n  );\n\n  sendMessage(socket, { type: 'notifications', payload: notifications });\n};\n\nexport const forceGenerateNotifications = (since) => {\n  sendRandomNotifications(currentSocket, since);\n};\n\nsocketServer.on('connection', (socket) => {\n  currentSocket = socket;\n\n  socket.on('message', (data) => {\n    const message = JSON.parse(data);\n\n    switch (message.type) {\n      case 'notifications': {\n        const since = message.payload;\n        sendRandomNotifications(socket, since);\n        break;\n      }\n      default:\n        break;\n    }\n  });\n});\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n];\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date();\n  let pastDate;\n\n  if (since) {\n    pastDate = parseISO(since);\n  } else {\n    pastDate = new Date(now.valueOf());\n    pastDate.setMinutes(pastDate.getMinutes() - 15);\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll());\n    const template = randomFromArray(notificationTemplates);\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id,\n    };\n  });\n\n  return notifications;\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nimport { client } from '../../api/client';\r\n\r\nconst initialState = [];\r\n\r\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\r\n  const response = await client.get('/fakeApi/users');\r\n  return response.data;\r\n});\r\n\r\nconst { reducer } = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers(builder) {\r\n    builder.addCase(fetchUsers.fulfilled, (state, action) => action.payload);\r\n  },\r\n});\r\n\r\nexport default reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport postsReducer from '../features/posts/postsSlice';\nimport usersReducer from '../features/users/usersSlice';\n\nexport default configureStore({\n  reducer: { posts: postsReducer, users: usersReducer },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { fetchUsers } from './features/users/usersSlice';\nimport { worker } from './api/server';\n\n// Wrap app rendering so we can wait for the mock API to initialize\nasync function start() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' });\n\n  store.dispatch(fetchUsers());\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\nstart();\n"],"sourceRoot":""}