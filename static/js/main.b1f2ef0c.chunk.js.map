{"version":3,"sources":["api/server.js","utils/endpoints.js","features/api/apiSlice.js","features/notifications/notificationsSlice.js","app/Navbar.js","features/users/usersSlice.js","features/posts/AddPostForm.js","features/posts/PostAuthor.js","features/posts/ReactionButtons.js","features/posts/TimeAgo.js","components/Spinner.js","features/posts/PostList.js","features/posts/SinglePostPage.js","features/posts/EditPostForm.js","features/users/UsersList.js","features/users/UsersPage.js","features/notifications/NotificationItem.js","features/notifications/NotificationsList.js","App.js","app/store.js","index.js"],"names":["seedDate","ARTIFICIAL_DELAY_MS","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","user","randomFromArray","array","length","db","factory","id","primaryKey","nanoid","firstName","String","lastName","name","username","posts","manyOf","post","title","date","content","reactions","oneOf","comments","comment","text","reaction","thumbsUp","Number","hooray","heart","rocket","eyes","createUserData","internet","userName","i","author","create","j","newPost","lorem","words","recent","paragraphs","currentSocket","serializePost","handlers","rest","get","req","res","ctx","getAll","map","delay","json","data","body","status","findFirst","where","equals","params","postId","patch","updatedPost","update","notifications","generateRandomNotifications","undefined","worker","setupWorker","socketServer","MockSocketServer","sendRandomNotifications","socket","since","obj","send","JSON","stringify","sendMessage","type","payload","on","message","parse","notificationTemplates","numNotifications","pastDate","now","parseISO","valueOf","setMinutes","getMinutes","Array","template","between","users","apiSlice","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getPosts","query","providesTags","result","getPost","error","arg","addNewPost","mutation","initialPost","url","method","HTTPMethod","POST","invalidatesTags","editPost","PATCH","addReaction","onQueryStarted","dispatch","queryFulfilled","updateCachedData","draft","find","currentAmount","patchResult","util","updateQueryData","undo","useGetPostsQuery","useGetPostQuery","useAddNewPostMutation","useEditPostMutation","useAddReactionMutation","notificationsReceived","createAction","extendedApi","injectEndpoints","getNotifications","onCacheEntryAdded","cacheDataLoaded","cacheEntryRemoved","ws","WebSocket","listener","event","push","sort","a","b","localeCompare","addEventListener","console","log","close","useGetNotificationsQuery","emptyNotifications","selectNotificationsResult","select","selectNotificationsData","createSelector","notificationsResult","fetchNotificationsWebsocket","getState","allNotifications","latestNotification","latestTimestamp","notificationsAdapter","createEntityAdapter","matchNotificationsReceived","isAnyOf","matchFulfilled","initialState","getInitialState","createSlice","reducers","allNotificationsRead","state","action","Object","values","entities","forEach","notification","read","extraReducers","addMatcher","notificationsMetadata","isNew","upsertMany","reducer","actions","getSelectors","selectNotificationsMetadata","selectAll","selectMetadataEntities","selectEntities","Navbar","useDispatch","unreadNotificationsBadge","numUnreadNotifications","useSelector","filter","className","to","onClick","usersAdapter","extendedApiSlice","getUsers","transformResponse","responseData","setAll","selectUsersResult","useGetUsersQuery","selectUsersData","usersResult","selectAllUsers","selectUserById","selectById","AddPostForm","useState","setTitle","setContent","userId","setUserId","isLoading","usersList","canSave","every","Boolean","onSavePostSubmitted","preventDefault","unwrap","userListOptions","value","onSubmit","htmlFor","onChange","target","disabled","PostAuthor","reactionEmoji","ReactionButtons","reactionButtons","entries","reactionName","emoji","TimeAgo","timestamp","timeAgo","timePeriod","formatDistanceToNow","Spinner","size","header","style","height","width","PostExcerpt","substring","PostsList","isFetching","isSuccess","isError","sortedPosts","useMemo","slice","containerClassname","classNames","toString","SinglePostPage","postContent","match","EditPostForm","updatePost","history","useHistory","placeholder","UsersList","renderedUsers","UserPage","selectPostsForUser","postTitles","selectFromResult","postsForUser","NotificationItem","notificationDate","notificationMessage","notificationUser","notificationClassname","new","NotificationsList","useLayoutEffect","App","exact","path","render","PostList","component","UsersPage","configureStore","notificationsReducer","middleware","getDefaultMiddleware","concat","start","onUnhandledRequest","store","initiate","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1f2ef0c.chunk.js","sourcesContent":["import { rest, setupWorker } from 'msw';\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data';\nimport { nanoid } from '@reduxjs/toolkit';\nimport faker from 'faker';\nimport seedrandom from 'seedrandom';\nimport { Server as MockSocketServer } from 'mock-socket';\nimport { setRandom } from 'txtgen';\n\nimport { parseISO } from 'date-fns';\n\nconst NUM_USERS = 3;\nconst POSTS_PER_USER = 3;\nconst RECENT_NOTIFICATIONS_DAYS = 7;\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 2000;\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true;\n\nlet rng = seedrandom();\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed');\n  let seedDate;\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString);\n  } else {\n    seedDate = new Date();\n    randomSeedString = seedDate.toISOString();\n    localStorage.setItem('randomTimestampSeed', randomSeedString);\n  }\n\n  rng = seedrandom(randomSeedString);\n  setRandom(rng);\n  faker.seed(seedDate.getTime());\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(rng() * (max - min + 1)) + min;\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1);\n  return array[index];\n};\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user'),\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post'),\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post'),\n  },\n});\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName();\n  const lastName = faker.name.lastName();\n\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName(),\n  };\n};\n\nconst createPostData = (user) => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create(),\n  };\n};\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData());\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author);\n    db.post.create(newPost);\n  }\n}\n\nconst serializePost = (post) => ({\n  ...post,\n  user: post.user.id,\n});\n\n/* MSW REST API Handlers */\n\nexport const handlers = [\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\n    const posts = db.post.getAll().map(serializePost);\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts));\n  }),\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\n    const data = req.body;\n\n    if (data.content === 'error') {\n      return res(\n        ctx.delay(ARTIFICIAL_DELAY_MS),\n        ctx.status(500),\n        ctx.json('Server error saving this post!')\n      );\n    }\n\n    data.date = new Date().toISOString();\n\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } });\n    data.user = user;\n    data.reactions = db.reaction.create();\n\n    const post = db.post.create(data);\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)));\n  }),\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    });\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)));\n  }),\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n    const { id, ...data } = req.body;\n    const updatedPost = db.post.update({\n      where: { id: { equals: req.params.postId } },\n      data,\n    });\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    );\n  }),\n\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    });\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json({ comments: post.comments })\n    );\n  }),\n\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n    const postId = req.params.postId;\n    const reaction = req.body.reaction;\n    const post = db.post.findFirst({\n      where: { id: { equals: postId } },\n    });\n\n    const updatedPost = db.post.update({\n      where: { id: { equals: postId } },\n      data: {\n        reactions: {\n          ...post.reactions,\n          [reaction]: (post.reactions[reaction] += 1),\n        },\n      },\n    });\n\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    );\n  }),\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\n    const numNotifications = getRandomInt(1, 5);\n\n    let notifications = generateRandomNotifications(\n      undefined,\n      numNotifications,\n      db\n    );\n\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications));\n  }),\n  rest.get('/fakeApi/users', (req, res, ctx) => {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()));\n  }),\n];\n\nexport const worker = setupWorker(...handlers);\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost');\n\nlet currentSocket;\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj));\n};\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5);\n\n  const notifications = generateRandomNotifications(\n    since,\n    numNotifications,\n    db\n  );\n\n  sendMessage(socket, { type: 'notifications', payload: notifications });\n};\n\nexport const forceGenerateNotifications = (since) => {\n  sendRandomNotifications(currentSocket, since);\n};\n\nsocketServer.on('connection', (socket) => {\n  currentSocket = socket;\n\n  socket.on('message', (data) => {\n    const message = JSON.parse(data);\n\n    switch (message.type) {\n      case 'notifications': {\n        const since = message.payload;\n        sendRandomNotifications(socket, since);\n        break;\n      }\n      default:\n        break;\n    }\n  });\n});\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n];\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date();\n  let pastDate;\n\n  if (since) {\n    pastDate = parseISO(since);\n  } else {\n    pastDate = new Date(now.valueOf());\n    pastDate.setMinutes(pastDate.getMinutes() - 15);\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll());\n    const template = randomFromArray(notificationTemplates);\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id,\n    };\n  });\n\n  return notifications;\n}\n","export const endpoints = {\r\n  users: 'users',\r\n  posts: 'posts',\r\n  reactions: 'reactions',\r\n  notifications: 'notifications',\r\n};\r\n\r\nexport const { users, posts, reactions, notifications } = endpoints;\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\nimport { HTTPMethod } from 'http-method-enum';\r\n\r\nimport { posts, reactions } from '../../utils/endpoints';\r\n\r\nexport const apiSlice = createApi({\r\n  reducerPath: 'api',\r\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\r\n  tagTypes: ['Post'],\r\n  endpoints: (builder) => ({\r\n    getPosts: builder.query({\r\n      query: () => '/' + posts,\r\n      providesTags: (result = [], error, arg) => [\r\n        'Post',\r\n        ...result.map((post) => ({ type: 'Post', id: post.id })),\r\n      ],\r\n    }),\r\n    getPost: builder.query({\r\n      query: (postId) => `/${posts}/${postId}`,\r\n      providesTags: (result, error, arg) => [{ type: 'Post', id: arg }],\r\n    }),\r\n    addNewPost: builder.mutation({\r\n      query: (initialPost) => ({\r\n        url: '/' + posts,\r\n        method: HTTPMethod.POST,\r\n        body: initialPost,\r\n      }),\r\n      invalidatesTags: ['Post'],\r\n    }),\r\n    editPost: builder.mutation({\r\n      query: (post) => ({\r\n        url: `/${posts}/${post.id}`,\r\n        method: HTTPMethod.PATCH,\r\n        body: post,\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [{ type: 'Post', id: arg.id }],\r\n    }),\r\n    addReaction: builder.mutation({\r\n      query: ({ postId, reaction }) => ({\r\n        url: `/${posts}/${postId}/${reactions}`,\r\n        method: HTTPMethod.POST,\r\n        // In a real app, we'd probably need to base this on user ID somehow\r\n        // so that a user can't do the same reaction more than once\r\n        body: { reaction },\r\n      }),\r\n      async onQueryStarted({ postId, reaction }, { dispatch, queryFulfilled }) {\r\n        const updateCachedData = (draft) => {\r\n          const post = draft.find((post) => post.id === postId);\r\n          if (post) {\r\n            const { reactions } = post;\r\n            const currentAmount = reactions[reaction];\r\n            reactions[reaction] = currentAmount + 1;\r\n          }\r\n        };\r\n\r\n        const patchResult = dispatch(\r\n          apiSlice.util.updateQueryData('getPosts', undefined, updateCachedData)\r\n        );\r\n\r\n        try {\r\n          await queryFulfilled;\r\n        } catch {\r\n          patchResult.undo();\r\n        }\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetPostsQuery,\r\n  useGetPostQuery,\r\n  // We export the useGetUsersQuery hook just for consistency, but for now we're not going to use it.\r\n  // useGetUsersQuery,\r\n  useAddNewPostMutation,\r\n  useEditPostMutation,\r\n  useAddReactionMutation,\r\n} = apiSlice;\r\n","import {\r\n  createSlice,\r\n  createEntityAdapter,\r\n  createSelector,\r\n  isAnyOf,\r\n  createAction,\r\n} from '@reduxjs/toolkit';\r\n\r\nimport { forceGenerateNotifications } from '../../api/server';\r\nimport { apiSlice } from '../api/apiSlice';\r\nimport { notifications } from '../../utils/endpoints';\r\n\r\nconst notificationsReceived = createAction(\r\n  'notifications/notificationsReceived'\r\n);\r\n\r\nconst extendedApi = apiSlice.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    getNotifications: builder.query({\r\n      query: () => '/' + notifications,\r\n      async onCacheEntryAdded(\r\n        arg,\r\n        { updateCachedData, cacheDataLoaded, cacheEntryRemoved, dispatch }\r\n      ) {\r\n        const ws = new WebSocket('ws://localhost');\r\n        try {\r\n          await cacheDataLoaded;\r\n\r\n          const listener = (event) => {\r\n            const message = JSON.parse(event.data);\r\n            switch (message.type) {\r\n              case notifications: {\r\n                updateCachedData((draft) => {\r\n                  draft.push(...message.payload);\r\n                  draft.sort((a, b) => b.date.localeCompare(a.date));\r\n                });\r\n                // Dispatch an additional action so we can track \"read\" state\r\n                dispatch(notificationsReceived(message.payload));\r\n                break;\r\n              }\r\n\r\n              default: {\r\n                break;\r\n              }\r\n            }\r\n          };\r\n\r\n          ws.addEventListener('message', listener);\r\n        } catch (error) {\r\n          console.log(error);\r\n          // no-op in case `cacheEntryRemoved` resolves before `cacheDataLoaded`,\r\n          // in which case `cacheDataLoaded` will throw\r\n        }\r\n\r\n        await cacheEntryRemoved;\r\n        ws.close();\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetNotificationsQuery } = extendedApi;\r\n\r\nconst emptyNotifications = [];\r\n\r\nexport const selectNotificationsResult =\r\n  extendedApi.endpoints.getNotifications.select();\r\n\r\nconst selectNotificationsData = createSelector(\r\n  selectNotificationsResult,\r\n  (notificationsResult) => notificationsResult.data ?? emptyNotifications\r\n);\r\n\r\nexport const fetchNotificationsWebsocket = () => (dispatch, getState) => {\r\n  const allNotifications = selectNotificationsData(getState());\r\n  const [latestNotification] = allNotifications;\r\n  const latestTimestamp = latestNotification?.date ?? '';\r\n  // Hardcode a call to the mock server to simulate a server push scenario over websockets\r\n  forceGenerateNotifications(latestTimestamp);\r\n};\r\n\r\nconst notificationsAdapter = createEntityAdapter();\r\n\r\nconst matchNotificationsReceived = isAnyOf(\r\n  notificationsReceived,\r\n  extendedApi.endpoints.getNotifications.matchFulfilled\r\n);\r\n\r\nconst initialState = notificationsAdapter.getInitialState();\r\n\r\nconst { reducer, actions } = createSlice({\r\n  name: 'notifications',\r\n  initialState,\r\n  reducers: {\r\n    allNotificationsRead(state, action) {\r\n      Object.values(state.entities).forEach(\r\n        (notification) => (notification.read = true)\r\n      );\r\n    },\r\n  },\r\n  extraReducers(builder) {\r\n    builder.addMatcher(matchNotificationsReceived, (state, action) => {\r\n      const notificationsMetadata = action.payload.map((notification) => ({\r\n        id: notification.id,\r\n        read: false,\r\n        isNew: true,\r\n      }));\r\n\r\n      Object.values(state.entities).forEach(\r\n        (notification) => (notification.isNew = !notification.read)\r\n      );\r\n\r\n      notificationsAdapter.upsertMany(state, notificationsMetadata);\r\n    });\r\n  },\r\n});\r\n\r\nexport const { allNotificationsRead } = actions;\r\n\r\nexport default reducer;\r\n\r\nexport const {\r\n  selectAll: selectNotificationsMetadata,\r\n  selectEntities: selectMetadataEntities,\r\n} = notificationsAdapter.getSelectors((state) => state.notifications);\r\n","import { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  fetchNotificationsWebsocket,\n  selectNotificationsMetadata,\n  useGetNotificationsQuery,\n} from '../features/notifications/notificationsSlice';\n\nconst Navbar = () => {\n  const dispatch = useDispatch();\n\n  // Trigger initial fetch of notifications and keep the websocket open to receive updates\n  useGetNotificationsQuery();\n\n  const notificationsMetadata = useSelector(selectNotificationsMetadata);\n  const numUnreadNotifications = notificationsMetadata.filter(\n    (notification) => !notification.read\n  ).length;\n\n  const fetchNewNotifications = () => {\n    dispatch(fetchNotificationsWebsocket());\n  };\n\n  let unreadNotificationsBadge;\n\n  if (numUnreadNotifications > 0) {\n    unreadNotificationsBadge = (\n      <span className=\"badge\">{numUnreadNotifications}</span>\n    );\n  }\n\n  return (\n    <nav>\n      <section>\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/\">Posts</Link>\n            <Link to=\"/users\">Users</Link>\n            <Link to=\"/notifications\">\n              Notifications {unreadNotificationsBadge}\n            </Link>\n          </div>\n          <button className=\"button\" onClick={fetchNewNotifications}>\n            Refresh Notifications\n          </button>\n        </div>\n      </section>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import { createSelector, createEntityAdapter } from '@reduxjs/toolkit';\r\n\r\nimport { apiSlice } from '../api/apiSlice';\r\nimport { users } from '../../utils/endpoints';\r\n\r\nconst usersAdapter = createEntityAdapter();\r\n\r\nconst initialState = usersAdapter.getInitialState();\r\n\r\nexport const extendedApiSlice = apiSlice.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    getUsers: builder.query({\r\n      query: () => '/' + users,\r\n      transformResponse: (responseData) =>\r\n        usersAdapter.setAll(initialState, responseData),\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetUsersQuery } = extendedApiSlice;\r\n\r\nexport const selectUsersResult = extendedApiSlice.endpoints.getUsers.select();\r\n\r\nexport const selectUsersData = createSelector(\r\n  selectUsersResult,\r\n  (usersResult) => usersResult.data\r\n);\r\n\r\nexport const { selectAll: selectAllUsers, selectById: selectUserById } =\r\n  usersAdapter.getSelectors((state) => selectUsersData(state) ?? initialState);\r\n","import { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { selectAllUsers } from '../users/usersSlice';\r\nimport { useAddNewPostMutation } from '../api/apiSlice';\r\n\r\nconst AddPostForm = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [userId, setUserId] = useState('');\r\n\r\n  const [addNewPost, { isLoading }] = useAddNewPostMutation();\r\n  const usersList = useSelector(selectAllUsers);\r\n\r\n  const onTitleChanged = ({ target }) => setTitle(target.value);\r\n  const onContentChanged = ({ target }) => setContent(target.value);\r\n  const onAuthorChanged = ({ target }) => setUserId(target.value);\r\n\r\n  const resetForm = () => {\r\n    setTitle('');\r\n    setContent('');\r\n    setUserId('');\r\n  };\r\n\r\n  const canSave = [title, content, userId].every(Boolean) && !isLoading;\r\n\r\n  const onSavePostSubmitted = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!canSave) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await addNewPost({ title, content, user: userId }).unwrap();\r\n    } catch (error) {\r\n      console.error('Failed to save the post: ', error);\r\n    } finally {\r\n      resetForm();\r\n    }\r\n  };\r\n\r\n  const userListOptions = usersList.map(({ id, name }) => (\r\n    <option key={id} value={id}>\r\n      {name}\r\n    </option>\r\n  ));\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add a New Post</h2>\r\n      <form onSubmit={onSavePostSubmitted}>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postAuthor\">Author:</label>\r\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\r\n          <option value=\"\"></option>\r\n          {userListOptions}\r\n        </select>\r\n        <label htmlFor=\"postContent\">Post:</label>\r\n        <textarea\r\n          type=\"text\"\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <button type=\"submit\" disabled={!canSave}>\r\n          Save Post\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AddPostForm;\r\n","import { useSelector } from 'react-redux';\r\n\r\nimport { selectUserById } from '../users/usersSlice';\r\n\r\nconst PostAuthor = ({ userId }) => {\r\n  const author = useSelector((state) => selectUserById(state, userId));\r\n\r\n  return <span>by {author ? author.name : 'Unknown author'}</span>;\r\n};\r\n\r\nexport default PostAuthor;\r\n","import { useAddReactionMutation } from '../api/apiSlice';\r\n\r\nconst reactionEmoji = {\r\n  thumbsUp: '👍',\r\n  hooray: '🎉',\r\n  heart: '❤️',\r\n  rocket: '🚀',\r\n  eyes: '👀',\r\n};\r\n\r\nconst ReactionButtons = ({ post }) => {\r\n  const [addReaction] = useAddReactionMutation();\r\n\r\n  const reactionButtons = Object.entries(reactionEmoji).map(\r\n    ([reactionName, emoji]) => {\r\n      const onAddReaction = () =>\r\n        addReaction({ postId: post.id, reaction: reactionName });\r\n\r\n      return (\r\n        <button\r\n          key={reactionName}\r\n          type=\"button\"\r\n          className=\"muted-button reaction-button\"\r\n          onClick={onAddReaction}\r\n        >\r\n          {emoji} {post.reactions[reactionName]}\r\n        </button>\r\n      );\r\n    }\r\n  );\r\n\r\n  return <div>{reactionButtons}</div>;\r\n};\r\n\r\nexport default ReactionButtons;\r\n","import { parseISO, formatDistanceToNow } from 'date-fns';\r\n\r\nconst TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = '';\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp);\r\n    const timePeriod = formatDistanceToNow(date);\r\n    timeAgo = `${timePeriod} ago`;\r\n  }\r\n\r\n  return (\r\n    <span title={timestamp}>\r\n      &nbsp; <i>{timeAgo}</i>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TimeAgo;\r\n","import React from 'react';\n\nexport const Spinner = ({ text = '', size = '5em' }) => {\n  const header = text ? <h4>{text}</h4> : null;\n  return (\n    <div className=\"spinner\">\n      {header}\n      <div className=\"loader\" style={{ height: size, width: size }} />\n    </div>\n  );\n};\n","import { useMemo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport PostAuthor from './PostAuthor';\r\nimport ReactionButtons from './ReactionButtons';\r\nimport TimeAgo from './TimeAgo';\r\nimport { Spinner } from '../../components/Spinner';\r\nimport { useGetPostsQuery } from '../api/apiSlice';\r\nimport classNames from 'classnames';\r\n\r\nconst PostExcerpt = ({ post }) => {\r\n  const { title, user, date, id, content } = post;\r\n\r\n  return (\r\n    <article className=\"post-excerpt\">\r\n      <h3>{title}</h3>\r\n      <div>\r\n        <PostAuthor userId={user} />\r\n        <TimeAgo timestamp={date} />\r\n      </div>\r\n      <p className=\"post-content\">{content.substring(0, 100)}</p>\r\n\r\n      <ReactionButtons post={post} />\r\n      <Link to={`/posts/${id}`} className=\"button muted-button\">\r\n        View Post\r\n      </Link>\r\n    </article>\r\n  );\r\n};\r\n\r\nconst PostsList = () => {\r\n  const {\r\n    data: posts = [],\r\n    isLoading,\r\n    isFetching,\r\n    isSuccess,\r\n    isError,\r\n    error,\r\n    // refetch,\r\n  } = useGetPostsQuery();\r\n\r\n  const sortedPosts = useMemo(() => {\r\n    const sortedPosts = posts.slice();\r\n    sortedPosts.sort((a, b) => b.date.localeCompare(a.date));\r\n\r\n    return sortedPosts;\r\n  }, [posts]);\r\n\r\n  let content;\r\n\r\n  if (isLoading) {\r\n    content = <Spinner text=\"Loading...\" />;\r\n  } else if (isSuccess) {\r\n    const containerClassname = classNames('posts-container', {\r\n      disabled: isFetching,\r\n    });\r\n\r\n    content = (\r\n      <div className={containerClassname}>\r\n        {sortedPosts.map((post) => (\r\n          <PostExcerpt key={post.id} post={post} />\r\n        ))}\r\n      </div>\r\n    );\r\n  } else if (isError) {\r\n    content = <p>{error.toString()}</p>;\r\n  }\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2>Posts</h2>\r\n      {/* <button onClick={refetch}>Refetch Posts</button> */}\r\n      {content}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default PostsList;\r\n","import { Link } from 'react-router-dom';\r\n\r\nimport PostAuthor from './PostAuthor';\r\nimport ReactionButtons from './ReactionButtons';\r\nimport TimeAgo from './TimeAgo';\r\nimport { Spinner } from '../../components/Spinner';\r\nimport { useGetPostQuery } from '../api/apiSlice';\r\n\r\nconst SinglePostPage = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const { data: post, isFetching, isSuccess } = useGetPostQuery(postId);\r\n\r\n  let postContent;\r\n  if (isFetching) {\r\n    postContent = <Spinner text=\"Loading\" />;\r\n  } else if (isSuccess) {\r\n    const { user, id, title, content, date } = post;\r\n\r\n    postContent = (\r\n      <article className=\"post\">\r\n        <h2>{title}</h2>\r\n        <div>\r\n          <PostAuthor userId={user} />\r\n          <TimeAgo timestamp={date} />\r\n        </div>\r\n        <p className=\"post-content\">{content}</p>\r\n        <ReactionButtons post={post} />\r\n        <Link to={`/edit-post/${id}`} className=\"button\">\r\n          Edit Post\r\n        </Link>\r\n      </article>\r\n    );\r\n  }\r\n\r\n  return <section>{postContent}</section>;\r\n};\r\n\r\nexport default SinglePostPage;\r\n","import { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { useGetPostQuery, useEditPostMutation } from '../api/apiSlice';\r\n\r\nconst EditPostForm = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const { data: post } = useGetPostQuery(postId);\r\n  const [updatePost] = useEditPostMutation();\r\n\r\n  const [title, setTitle] = useState(post.title);\r\n  const [content, setContent] = useState(post.content);\r\n\r\n  const history = useHistory();\r\n\r\n  const onTitleChanged = (event) => setTitle(event.target.value);\r\n  const onContentChanged = (event) => setContent(event.target.value);\r\n\r\n  const onSavePostSubmitted = async (event) => {\r\n    event.preventDefault();\r\n    if (!title || !content) {\r\n      return;\r\n    }\r\n\r\n    await updatePost({ id: postId, title, content });\r\n    history.push(`/posts/${postId}`);\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h2>Edit Post</h2>\r\n      <form onSubmit={onSavePostSubmitted}>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <button type=\"submit\">Save Post</button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default EditPostForm;\r\n","import { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { selectAllUsers } from './usersSlice';\r\n\r\nconst UsersList = () => {\r\n  const users = useSelector(selectAllUsers);\r\n\r\n  const renderedUsers = users.map(({ id, name }) => (\r\n    <li key={id}>\r\n      <Link to={`/users/${id}`}>{name}</Link>\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <section>\r\n      <h2>Users</h2>\r\n      <ul>{renderedUsers}</ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default UsersList;\r\n","import { useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\nimport { selectUserById } from './usersSlice';\r\nimport { useGetPostsQuery } from '../api/apiSlice';\r\n\r\nconst UserPage = ({ match }) => {\r\n  const { userId } = match.params;\r\n\r\n  const user = useSelector((state) => selectUserById(state, userId));\r\n\r\n  const selectPostsForUser = useMemo(\r\n    () =>\r\n      createSelector(\r\n        (res) => res.data,\r\n        (res, userId) => userId,\r\n        (data, userId) => data.filter((post) => post.user === userId)\r\n      ),\r\n    []\r\n  );\r\n\r\n  const { postsForUser } = useGetPostsQuery(undefined, {\r\n    selectFromResult: (result) => ({\r\n      ...result,\r\n      postsForUser: selectPostsForUser(result, userId),\r\n    }),\r\n  });\r\n\r\n  const postTitles = postsForUser.map(({ id, title }) => {\r\n    return (\r\n      <li key={id}>\r\n        <Link to={`/posts/${id}`}>{title}</Link>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <section>\r\n      <h2>{user.name}</h2>\r\n      <ul>{postTitles}</ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default UserPage;\r\n","import { useSelector } from 'react-redux';\r\nimport { formatDistanceToNow, parseISO } from 'date-fns';\r\nimport classNames from 'classnames';\r\n\r\nimport { selectAllUsers } from '../users/usersSlice';\r\n\r\nconst NotificationItem = ({\r\n  notificationDate,\r\n  notificationMessage,\r\n  notificationUser,\r\n  isNew,\r\n}) => {\r\n  const users = useSelector(selectAllUsers);\r\n\r\n  const date = parseISO(notificationDate);\r\n  const timeAgo = formatDistanceToNow(date);\r\n  const user = users.find((user) => user.id === notificationUser) || {\r\n    name: 'Unknown User',\r\n  };\r\n\r\n  const notificationClassname = classNames('notification', {\r\n    new: isNew,\r\n  });\r\n\r\n  return (\r\n    <div className={notificationClassname}>\r\n      <div>\r\n        <b>{user.name}</b> {notificationMessage}\r\n      </div>\r\n      <div title={date}>\r\n        <i>{timeAgo} ago</i>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotificationItem;\r\n","import { useLayoutEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n  allNotificationsRead,\r\n  useGetNotificationsQuery,\r\n} from './notificationsSlice';\r\nimport NotificationItem from './NotificationItem';\r\nimport { selectMetadataEntities } from './notificationsSlice';\r\n\r\nconst NotificationsList = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { data: notifications = [] } = useGetNotificationsQuery();\r\n  const notificationsMetadata = useSelector(selectMetadataEntities);\r\n\r\n  useLayoutEffect(() => {\r\n    dispatch(allNotificationsRead());\r\n  });\r\n\r\n  return (\r\n    <section>\r\n      <h2>Notifications</h2>\r\n      {notifications.map(({ date, message, id, user }) => (\r\n        <NotificationItem\r\n          notificationDate={date}\r\n          notificationMessage={message}\r\n          key={id}\r\n          notificationUser={user}\r\n          isNew={notificationsMetadata[id].isNew}\r\n        />\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default NotificationsList;\r\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n\nimport Navbar from './app/Navbar';\nimport AddPostForm from './features/posts/AddPostForm';\nimport PostList from './features/posts/PostList';\nimport SinglePostPage from './features/posts/SinglePostPage';\nimport EditPostForm from './features/posts/EditPostForm';\nimport UsersList from './features/users/UsersList';\nimport UsersPage from './features/users/UsersPage';\nimport NotificationsList from './features/notifications/NotificationsList';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <>\n                <AddPostForm />\n                <PostList />\n              </>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/edit-post/:postId\" component={EditPostForm} />\n          <Route exact path=\"/users\" component={UsersList} />\n          <Route exact path=\"/users/:userId\" component={UsersPage} />\n          <Route exact path=\"/notifications\" component={NotificationsList} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport notificationsReducer from '../features/notifications/notificationsSlice';\nimport { apiSlice } from '../features/api/apiSlice';\n\nexport default configureStore({\n  reducer: {\n    notifications: notificationsReducer,\n    [apiSlice.reducerPath]: apiSlice.reducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(apiSlice.middleware),\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { worker } from './api/server';\nimport { extendedApiSlice } from './features/users/usersSlice';\n\n// Wrap app rendering so we can wait for the mock API to initialize\nasync function start() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' });\n\n  store.dispatch(extendedApiSlice.endpoints.getUsers.initiate());\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\nstart();\n"],"sourceRoot":""}