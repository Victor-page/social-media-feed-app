{"version":3,"sources":["app/Navbar.js","features/postList/postListSlice.js","features/postList/AddPostForm.js","features/postList/PostAuthor.js","features/postList/ReactionButtons.js","features/postList/TimeAgo.js","features/postList/PostList.js","features/postList/SinglePostPage.js","features/postList/EditPostForm.js","App.js","api/server.js","features/userList/userListSlice.js","app/store.js","index.js"],"names":["Navbar","className","to","initialState","id","title","content","user","date","sub","Date","minutes","toISOString","reactions","thumbsUp","hooray","heart","rocket","eyes","createSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","nanoid","postUpdated","existingPost","find","post","reactionAdded","postId","reaction","actions","AddPostForm","useState","setTitle","setContent","setUserId","dispatch","useDispatch","usersList","useSelector","userList","canSave","Boolean","userListOptions","map","value","onSubmit","event","preventDefault","htmlFor","type","onChange","target","disabled","PostAuthor","author","reactionEmoji","ReactionButtons","onReactionAdded","reactionButtons","Object","entries","emoji","onClick","bind","TimeAgo","timestamp","timeAgo","parseISO","timePeriod","formatDistanceToNow","PostList","renderedPosts","postList","slice","sort","a","b","localeCompare","substring","SinglePostPage","match","params","EditPostForm","history","useHistory","placeholder","App","seedDate","exact","path","render","component","configureStore","postListReducer","userListReducer","ARTIFICIAL_DELAY_MS","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","db","factory","primaryKey","firstName","String","lastName","username","posts","manyOf","oneOf","comments","comment","text","Number","createUserData","internet","userName","i","create","j","newPost","lorem","words","recent","paragraphs","serializePost","handlers","rest","get","req","res","ctx","getAll","delay","json","data","body","status","findFirst","where","equals","patch","updatedPost","update","notifications","generateRandomNotifications","undefined","worker","setupWorker","socketServer","MockSocketServer","sendRandomNotifications","socket","since","obj","send","JSON","stringify","sendMessage","on","message","parse","notificationTemplates","numNotifications","pastDate","now","valueOf","setMinutes","getMinutes","Array","template","between","start","onUnhandledRequest","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.3280ea2c.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\n\nconst Navbar = () => (\n  <nav>\n    <section>\n      {/* <h1>Redux Essentials</h1> */}\n\n      <div className=\"navContent\">\n        <div className=\"navLinks\"></div>\n        <Link to=\"/\">Posts</Link>\n      </div>\n    </section>\n  </nav>\n);\n\nexport default Navbar;\n","import { nanoid, createSlice } from '@reduxjs/toolkit';\r\nimport { sub } from 'date-fns';\r\n\r\nconst initialState = [\r\n  {\r\n    id: '1',\r\n    title: 'First Post!',\r\n    content: 'Hello!',\r\n    user: '0',\r\n    date: sub(new Date(), { minutes: 10 }).toISOString(),\r\n    reactions: {\r\n      thumbsUp: 0,\r\n      hooray: 0,\r\n      heart: 0,\r\n      rocket: 0,\r\n      eyes: 0,\r\n    },\r\n  },\r\n  {\r\n    id: '2',\r\n    title: 'Second Post!',\r\n    content: 'More text',\r\n    user: '2',\r\n    date: sub(new Date(), { minutes: 5 }).toISOString(),\r\n    reactions: {\r\n      thumbsUp: 0,\r\n      hooray: 0,\r\n      heart: 0,\r\n      rocket: 0,\r\n      eyes: 0,\r\n    },\r\n  },\r\n];\r\n\r\nconst { reducer, actions } = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    postAdded: {\r\n      reducer(state, action) {\r\n        state.push(action.payload);\r\n      },\r\n      prepare: (title, content, userId) => ({\r\n        payload: {\r\n          id: nanoid(),\r\n          title,\r\n          content,\r\n          user: userId,\r\n          date: new Date().toISOString(),\r\n        },\r\n      }),\r\n    },\r\n    postUpdated(state, action) {\r\n      const { id, title, content } = action.payload;\r\n      const existingPost = state.find((post) => post.id === id);\r\n      if (existingPost) {\r\n        existingPost.title = title;\r\n        existingPost.content = content;\r\n      }\r\n    },\r\n    reactionAdded(state, action) {\r\n      const { postId, reaction } = action.payload;\r\n      const existingPost = state.find((post) => post.id === postId);\r\n      existingPost && existingPost.reactions[reaction]++;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { postAdded, postUpdated, reactionAdded } = actions;\r\n\r\nexport default reducer;\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { postAdded } from './postListSlice';\r\n\r\nconst AddPostForm = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [userId, setUserId] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const usersList = useSelector((state) => state.userList);\r\n\r\n  const onTitleChanged = ({ target }) => setTitle(target.value);\r\n  const onContentChanged = ({ target }) => setContent(target.value);\r\n  const onAuthorChanged = ({ target }) => setUserId(target.value);\r\n\r\n  const resetForm = () => {\r\n    setTitle('');\r\n    setContent('');\r\n  };\r\n\r\n  const onSavePostSubmitted = (event) => {\r\n    event.preventDefault();\r\n    title && content && dispatch(postAdded(title, content, userId));\r\n    resetForm();\r\n  };\r\n\r\n  const canSave = Boolean(title) && Boolean(content) && Boolean(userId);\r\n\r\n  const userListOptions = usersList.map(({ id, name }) => (\r\n    <option key={id} value={id}>\r\n      {name}\r\n    </option>\r\n  ));\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add a New Post</h2>\r\n      <form onSubmit={onSavePostSubmitted}>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postAuthor\">Author:</label>\r\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\r\n          <option value=\"\"></option>\r\n          {userListOptions}\r\n        </select>\r\n        <label htmlFor=\"postContent\">Post:</label>\r\n        <textarea\r\n          type=\"text\"\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <button type=\"submit\" disabled={!canSave}>\r\n          Save Post\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AddPostForm;\r\n","import { useSelector } from 'react-redux';\r\n\r\nconst PostAuthor = ({ userId }) => {\r\n  const author = useSelector((state) =>\r\n    state.userList.find((user) => user.id === userId)\r\n  );\r\n\r\n  return <span>by {author ? author.name : 'Unknown author'}</span>;\r\n};\r\n\r\nexport default PostAuthor;\r\n","import { useDispatch } from 'react-redux';\r\n\r\nimport { reactionAdded } from './postListSlice';\r\n\r\nconst reactionEmoji = {\r\n  thumbsUp: '👍',\r\n  hooray: '🎉',\r\n  heart: '❤️',\r\n  rocket: '🚀',\r\n  eyes: '👀',\r\n};\r\n\r\nconst ReactionButtons = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onReactionAdded = (id, name) =>\r\n    dispatch(reactionAdded({ postId: id, reaction: name }));\r\n\r\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => (\r\n    <button\r\n      key={name}\r\n      type=\"button\"\r\n      className=\"muted-button reaction-button\"\r\n      onClick={onReactionAdded.bind(null, post.id, name)}\r\n    >\r\n      {emoji} {post.reactions[name]}\r\n    </button>\r\n  ));\r\n\r\n  return <div>{reactionButtons}</div>;\r\n};\r\n\r\nexport default ReactionButtons;\r\n","import { parseISO, formatDistanceToNow } from 'date-fns';\r\n\r\nconst TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = '';\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp);\r\n    const timePeriod = formatDistanceToNow(date);\r\n    timeAgo = `${timePeriod} ago`;\r\n  }\r\n\r\n  return (\r\n    <span title={timestamp}>\r\n      &nbsp; <i>{timeAgo}</i>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TimeAgo;\r\n","import { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport PostAuthor from './PostAuthor';\r\nimport ReactionButtons from './ReactionButtons';\r\nimport TimeAgo from './TimeAgo';\r\n\r\nconst PostList = () => {\r\n  const postList = useSelector((state) => state.postList);\r\n\r\n  const orderedPostList = postList\r\n    .slice()\r\n    .sort((a, b) => b.date.localeCompare(a.date));\r\n\r\n  const renderedPosts = orderedPostList.map((post) => {\r\n    const { id, title, content, user, date } = post;\r\n    return (\r\n      <article className=\"post-excerpt\" key={id}>\r\n        <h3>{title}</h3>\r\n        <div>\r\n          <PostAuthor userId={user} />\r\n          <TimeAgo timestamp={date} />\r\n        </div>\r\n        <p className=\"post-content\">{content.substring(0, 100)}</p>\r\n        <ReactionButtons post={post} />\r\n        <Link to={`/posts/${id}`} className=\"button muted-button\">\r\n          View Post\r\n        </Link>\r\n      </article>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <section className=\"post-list\">\r\n      <h2>Posts</h2>\r\n      {renderedPosts}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport PostAuthor from './PostAuthor';\r\nimport ReactionButtons from './ReactionButtons';\r\nimport TimeAgo from './TimeAgo';\r\n\r\nconst SinglePostPage = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const post = useSelector((state) => {\r\n    return state.postList.find((post) => post.id === postId);\r\n  });\r\n\r\n  const { user, id, title, content, date } = post;\r\n\r\n  if (!post) {\r\n    return (\r\n      <section>\r\n        <h2>Post not found!</h2>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <article className=\"post\">\r\n        <h2>{title}</h2>\r\n        <div>\r\n          <PostAuthor userId={user} />\r\n          <TimeAgo timestamp={date} />\r\n        </div>\r\n        <p className=\"post-content\">{content}</p>\r\n        <ReactionButtons post={post} />\r\n        <Link to={`/edit-post/${id}`} className=\"button\">\r\n          Edit Post\r\n        </Link>\r\n      </article>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SinglePostPage;\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { postUpdated } from './postListSlice';\r\n\r\nconst EditPostForm = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const post = useSelector((state) =>\r\n    state.postList.find((post) => post.id === postId)\r\n  );\r\n\r\n  const [title, setTitle] = useState(post.title);\r\n  const [content, setContent] = useState(post.content);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const onTitleChanged = (event) => setTitle(event.target.value);\r\n  const onContentChanged = (event) => setContent(event.target.value);\r\n\r\n  const onSavePostSubmitted = (event) => {\r\n    event.preventDefault();\r\n    if (!title || !content) {\r\n      return;\r\n    }\r\n\r\n    dispatch(postUpdated({ id: postId, content, title }));\r\n    history.push(`/posts/${postId}`);\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h2>Edit Post</h2>\r\n      <form onSubmit={onSavePostSubmitted}>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <button type=\"submit\">Save Post</button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default EditPostForm;\r\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n\nimport Navbar from './app/Navbar';\nimport AddPostForm from './features/postList/AddPostForm';\nimport PostList from './features/postList/PostList';\nimport SinglePostPage from './features/postList/SinglePostPage';\nimport EditPostForm from './features/postList/EditPostForm';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <>\n                <AddPostForm />\n                <PostList />\n              </>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/edit-post/:postId\" component={EditPostForm} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { rest, setupWorker } from 'msw';\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data';\nimport { nanoid } from '@reduxjs/toolkit';\nimport faker from 'faker';\nimport seedrandom from 'seedrandom';\nimport { Server as MockSocketServer } from 'mock-socket';\nimport { setRandom } from 'txtgen';\n\nimport { parseISO } from 'date-fns';\n\nconst NUM_USERS = 3;\nconst POSTS_PER_USER = 3;\nconst RECENT_NOTIFICATIONS_DAYS = 7;\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 2000;\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true;\n\nlet rng = seedrandom();\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed');\n  let seedDate;\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString);\n  } else {\n    seedDate = new Date();\n    randomSeedString = seedDate.toISOString();\n    localStorage.setItem('randomTimestampSeed', randomSeedString);\n  }\n\n  rng = seedrandom(randomSeedString);\n  setRandom(rng);\n  faker.seed(seedDate.getTime());\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(rng() * (max - min + 1)) + min;\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1);\n  return array[index];\n};\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user'),\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post'),\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post'),\n  },\n});\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName();\n  const lastName = faker.name.lastName();\n\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName(),\n  };\n};\n\nconst createPostData = (user) => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create(),\n  };\n};\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData());\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author);\n    db.post.create(newPost);\n  }\n}\n\nconst serializePost = (post) => ({\n  ...post,\n  user: post.user.id,\n});\n\n/* MSW REST API Handlers */\n\nexport const handlers = [\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\n    const posts = db.post.getAll().map(serializePost);\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts));\n  }),\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\n    const data = req.body;\n\n    if (data.content === 'error') {\n      return res(\n        ctx.delay(ARTIFICIAL_DELAY_MS),\n        ctx.status(500),\n        ctx.json('Server error saving this post!')\n      );\n    }\n\n    data.date = new Date().toISOString();\n\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } });\n    data.user = user;\n    data.reactions = db.reaction.create();\n\n    const post = db.post.create(data);\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)));\n  }),\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    });\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)));\n  }),\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n    const { id, ...data } = req.body;\n    const updatedPost = db.post.update({\n      where: { id: { equals: req.params.postId } },\n      data,\n    });\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    );\n  }),\n\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    });\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json({ comments: post.comments })\n    );\n  }),\n\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n    const postId = req.params.postId;\n    const reaction = req.body.reaction;\n    const post = db.post.findFirst({\n      where: { id: { equals: postId } },\n    });\n\n    const updatedPost = db.post.update({\n      where: { id: { equals: postId } },\n      data: {\n        reactions: {\n          ...post.reactions,\n          [reaction]: (post.reactions[reaction] += 1),\n        },\n      },\n    });\n\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    );\n  }),\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\n    const numNotifications = getRandomInt(1, 5);\n\n    let notifications = generateRandomNotifications(\n      undefined,\n      numNotifications,\n      db\n    );\n\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications));\n  }),\n  rest.get('/fakeApi/users', (req, res, ctx) => {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()));\n  }),\n];\n\nexport const worker = setupWorker(...handlers);\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost');\n\nlet currentSocket;\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj));\n};\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5);\n\n  const notifications = generateRandomNotifications(\n    since,\n    numNotifications,\n    db\n  );\n\n  sendMessage(socket, { type: 'notifications', payload: notifications });\n};\n\nexport const forceGenerateNotifications = (since) => {\n  sendRandomNotifications(currentSocket, since);\n};\n\nsocketServer.on('connection', (socket) => {\n  currentSocket = socket;\n\n  socket.on('message', (data) => {\n    const message = JSON.parse(data);\n\n    switch (message.type) {\n      case 'notifications': {\n        const since = message.payload;\n        sendRandomNotifications(socket, since);\n        break;\n      }\n      default:\n        break;\n    }\n  });\n});\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n];\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date();\n  let pastDate;\n\n  if (since) {\n    pastDate = parseISO(since);\n  } else {\n    pastDate = new Date(now.valueOf());\n    pastDate.setMinutes(pastDate.getMinutes() - 15);\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll());\n    const template = randomFromArray(notificationTemplates);\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id,\n    };\n  });\n\n  return notifications;\n}\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = [\r\n  { id: '0', name: 'Tianna Jenkins' },\r\n  { id: '1', name: 'Kevin Grant' },\r\n  { id: '2', name: 'Madison Price' },\r\n];\r\n\r\nconst { reducer } = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {},\r\n});\r\n\r\nexport default reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport postListReducer from '../features/postList/postListSlice';\nimport userListReducer from '../features/userList/userListSlice';\n\nexport default configureStore({\n  reducer: { postList: postListReducer, userList: userListReducer },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\n\nimport { worker } from './api/server';\n\n// Wrap app rendering so we can wait for the mock API to initialize\nasync function start() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' });\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\nstart();\n"],"sourceRoot":""}